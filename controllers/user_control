const bcrypt = require('bcryptjs')
const userRouter = require('express').Router()

const config = require('../utils/config')
const logger = require('../utils/logger')

const User = require('../model/user')
const Blog = require('../model/blog')

userRouter.get('/all', async (request, response) => {
  console.log("Get all")
  const lista = await User.find({}).populate('blogs')
  response.json(lista.map(u => u.toJSON()))
  })

userRouter.get('/:id', async (request, response) => {
    const ob = await User.findById(request.params.id)
    response.json(ob)
  })
  
userRouter.post('/', async (request, response, next) => {
  const body = request.body
  console.log("Adding starts", body)

  if(!body.username){
    return (response.status(400).json({
      error: 'No usename'
    }))
  }

  if(!body.password){
    return(response.status(400).json({
      error:'No number'
    }))
  }
 
  console.log("username ja passord ok")

//  if(user.filter(s => s.username === body.username).length !== 0){
//    return ( res.status(400).json({
//      error: 'name exists already'
//    }))
//  }

  if(body.username.length < 4){
    return ( res.status(400).json({
      error: 'too short username'
    }))
  }

  if(body.password.length < 4){
    return ( res.status(400).json({
      error: 'too short password'
    }))
  }
  console.log("pituudet ok")
  const saltRounds = 10
  const passwordHash = await bcrypt.hash(body.password, saltRounds)

  console.log("hash", passwordHash)

  const newUser = new User({
    username: body.username,
    name: body.name,
    password: passwordHash
  })
  try {
    console.log("TrySave")
    const savedUser = await newUser.save()
    response.status(201).json(savedUser)
  } catch (exeption) {
    console.log("errori tuli:",exeption)
    next(exeption)
  }
})

userRouter.delete('/:id', async (request, response, next) => {
  await User.findByIdAndRemove(request.params.id)
  response.status(204).end()
})
  
module.exports = userRouter